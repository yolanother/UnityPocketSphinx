//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using SphinxBase;

namespace PocketSphinx {

public class Decoder : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Decoder(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Decoder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Decoder() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PocketSphinxPINVOKE.delete_Decoder(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Decoder() : this(PocketSphinxPINVOKE.new_Decoder__SWIG_0(), true) {
  }

  public Decoder(SphinxBase.Config Config) : this(PocketSphinxPINVOKE.new_Decoder__SWIG_1(Config.getCPtr(Config)), true) {
  }

  public void Reinit(SphinxBase.Config Config) {
    PocketSphinxPINVOKE.Decoder_Reinit(swigCPtr, Config.getCPtr(Config));
  }

  public void LoadDict(string Fdict, string Ffilter, string Format) {
    PocketSphinxPINVOKE.Decoder_LoadDict(swigCPtr, Fdict, Ffilter, Format);
  }

  public void SaveDict(string Dictfile, string Format) {
    PocketSphinxPINVOKE.Decoder_SaveDict(swigCPtr, Dictfile, Format);
  }

  public void AddWord(string Word, string Phones, int Update) {
    PocketSphinxPINVOKE.Decoder_AddWord(swigCPtr, Word, Phones, Update);
  }

  public string LookupWord(string Word) {
    string ret = PocketSphinxPINVOKE.Decoder_LookupWord(swigCPtr, Word);
    return ret;
  }

  public Lattice GetLattice() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_GetLattice(swigCPtr);
    Lattice ret = (cPtr == global::System.IntPtr.Zero) ? null : new Lattice(cPtr, false);
    return ret;
  }

  public SphinxBase.Config GetConfig() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_GetConfig(swigCPtr);
    SphinxBase.Config ret = (cPtr == global::System.IntPtr.Zero) ? null : new SphinxBase.Config(cPtr, true);
    return ret;
  }

  public static SphinxBase.Config DefaultConfig() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_DefaultConfig();
    SphinxBase.Config ret = (cPtr == global::System.IntPtr.Zero) ? null : new SphinxBase.Config(cPtr, true);
    return ret;
  }

  public static SphinxBase.Config FileConfig(string Path) {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_FileConfig(Path);
    SphinxBase.Config ret = (cPtr == global::System.IntPtr.Zero) ? null : new SphinxBase.Config(cPtr, true);
    return ret;
  }

  public void StartStream() {
    PocketSphinxPINVOKE.Decoder_StartStream(swigCPtr);
  }

  public void StartUtt() {
    PocketSphinxPINVOKE.Decoder_StartUtt(swigCPtr);
  }

  public void EndUtt() {
    PocketSphinxPINVOKE.Decoder_EndUtt(swigCPtr);
  }

  public int ProcessRaw(byte[] SDATA, int SIZE, bool NoSearch, bool FullUtt) {
    int ret = PocketSphinxPINVOKE.Decoder_ProcessRaw(swigCPtr, SDATA, SIZE, NoSearch, FullUtt);
    return ret;
  }

  public Hypothesis Hyp() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_Hyp(swigCPtr);
    Hypothesis ret = (cPtr == global::System.IntPtr.Zero) ? null : new Hypothesis(cPtr, true);
    return ret;
  }

  public FrontEnd GetFe() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_GetFe(swigCPtr);
    FrontEnd ret = (cPtr == global::System.IntPtr.Zero) ? null : new FrontEnd(cPtr, false);
    return ret;
  }

  public Feature GetFeat() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_GetFeat(swigCPtr);
    Feature ret = (cPtr == global::System.IntPtr.Zero) ? null : new Feature(cPtr, false);
    return ret;
  }

  public bool GetInSpeech() {
    bool ret = PocketSphinxPINVOKE.Decoder_GetInSpeech(swigCPtr);
    return ret;
  }

  public FsgModel GetFsg(string Name) {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_GetFsg(swigCPtr, Name);
    FsgModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new FsgModel(cPtr, false);
    return ret;
  }

  public void SetFsg(string Name, FsgModel Fsg) {
    PocketSphinxPINVOKE.Decoder_SetFsg(swigCPtr, Name, FsgModel.getCPtr(Fsg));
  }

  public void SetJsgfFile(string Name, string Path) {
    PocketSphinxPINVOKE.Decoder_SetJsgfFile(swigCPtr, Name, Path);
  }

  public void SetJsgfString(string Name, string JsgfString) {
    PocketSphinxPINVOKE.Decoder_SetJsgfString(swigCPtr, Name, JsgfString);
  }

  public string GetKws(string Name) {
    string ret = PocketSphinxPINVOKE.Decoder_GetKws(swigCPtr, Name);
    return ret;
  }

  public void SetKws(string Name, string Keyfile) {
    PocketSphinxPINVOKE.Decoder_SetKws(swigCPtr, Name, Keyfile);
  }

  public void SetKeyphrase(string Name, string Keyphrase) {
    PocketSphinxPINVOKE.Decoder_SetKeyphrase(swigCPtr, Name, Keyphrase);
  }

  public void SetAllphoneFile(string Name, string Lmfile) {
    PocketSphinxPINVOKE.Decoder_SetAllphoneFile(swigCPtr, Name, Lmfile);
  }

  public NGramModel GetLm(string Name) {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_GetLm(swigCPtr, Name);
    NGramModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new NGramModel(cPtr, true);
    return ret;
  }

  public void SetLm(string Name, NGramModel Lm) {
    PocketSphinxPINVOKE.Decoder_SetLm(swigCPtr, Name, NGramModel.getCPtr(Lm));
  }

  public void SetLmFile(string Name, string Path) {
    PocketSphinxPINVOKE.Decoder_SetLmFile(swigCPtr, Name, Path);
  }

  public LogMath GetLogmath() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_GetLogmath(swigCPtr);
    LogMath ret = (cPtr == global::System.IntPtr.Zero) ? null : new LogMath(cPtr, true);
    return ret;
  }

  public void SetSearch(string SearchName) {
    PocketSphinxPINVOKE.Decoder_SetSearch(swigCPtr, SearchName);
  }

  public void UnsetSearch(string SearchName) {
    PocketSphinxPINVOKE.Decoder_UnsetSearch(swigCPtr, SearchName);
  }

  public string GetSearch() {
    string ret = PocketSphinxPINVOKE.Decoder_GetSearch(swigCPtr);
    return ret;
  }

  public int NFrames() {
    int ret = PocketSphinxPINVOKE.Decoder_NFrames(swigCPtr);
    return ret;
  }

  public SegmentList Seg() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_Seg(swigCPtr);
    SegmentList ret = (cPtr == global::System.IntPtr.Zero) ? null : new SegmentList(cPtr, false);
    return ret;
  }

  public NBestList Nbest() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.Decoder_Nbest(swigCPtr);
    NBestList ret = (cPtr == global::System.IntPtr.Zero) ? null : new NBestList(cPtr, false);
    return ret;
  }

}

}
