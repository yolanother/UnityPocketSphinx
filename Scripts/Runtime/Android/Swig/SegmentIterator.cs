//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Pocketsphinx {

public class SegmentIterator : global::System.Collections.IEnumerator {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SegmentIterator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SegmentIterator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SegmentIterator() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PocketSphinxPINVOKE.delete_SegmentIterator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public object Current 
  {
     get
     {
       return GetCurrent();
     }
  }

  public SegmentIterator(SWIGTYPE_p_void Ptr) : this(PocketSphinxPINVOKE.new_SegmentIterator(SWIGTYPE_p_void.getCPtr(Ptr)), true) {
  }

  public bool MoveNext() {
    bool ret = PocketSphinxPINVOKE.SegmentIterator_MoveNext(swigCPtr);
    return ret;
  }

  public void Reset() {
    PocketSphinxPINVOKE.SegmentIterator_Reset(swigCPtr);
  }

  public Segment GetCurrent() {
    global::System.IntPtr cPtr = PocketSphinxPINVOKE.SegmentIterator_GetCurrent(swigCPtr);
    Segment ret = (cPtr == global::System.IntPtr.Zero) ? null : new Segment(cPtr, false);
    return ret;
  }

}

}
