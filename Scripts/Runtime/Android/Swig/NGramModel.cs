//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Pocketsphinx {

public class NGramModel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NGramModel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NGramModel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NGramModel() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SphinxBasePINVOKE.delete_NGramModel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static NGramModel FromIter(SWIGTYPE_p_void Itor) {
    global::System.IntPtr cPtr = SphinxBasePINVOKE.NGramModel_FromIter(SWIGTYPE_p_void.getCPtr(Itor));
    NGramModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new NGramModel(cPtr, false);
    return ret;
  }

  public NGramModel(string Path) : this(SphinxBasePINVOKE.new_NGramModel__SWIG_0(Path), true) {
  }

  public NGramModel(Config Config, LogMath Logmath, string Path) : this(SphinxBasePINVOKE.new_NGramModel__SWIG_1(Config.getCPtr(Config), LogMath.getCPtr(Logmath), Path), true) {
  }

  public void Write(string Path, int Ftype) {
    SphinxBasePINVOKE.NGramModel_Write(swigCPtr, Path, Ftype);
  }

  public int StrToType(string Str) {
    int ret = SphinxBasePINVOKE.NGramModel_StrToType(swigCPtr, Str);
    return ret;
  }

  public string TypeToStr(int Type) {
    string ret = SphinxBasePINVOKE.NGramModel_TypeToStr(swigCPtr, Type);
    return ret;
  }

  public void Casefold(int Kase) {
    SphinxBasePINVOKE.NGramModel_Casefold(swigCPtr, Kase);
  }

  public int Size() {
    int ret = SphinxBasePINVOKE.NGramModel_Size(swigCPtr);
    return ret;
  }

  public int AddWord(string Word, float Weight) {
    int ret = SphinxBasePINVOKE.NGramModel_AddWord(swigCPtr, Word, Weight);
    return ret;
  }

  public int Prob(uint N, SWIGTYPE_p_p_char Ptr) {
    int ret = SphinxBasePINVOKE.NGramModel_Prob(swigCPtr, N, SWIGTYPE_p_p_char.getCPtr(Ptr));
    return ret;
  }

}

}
