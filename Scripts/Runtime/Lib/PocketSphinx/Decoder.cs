//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Pocketsphinx {

public class Decoder : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Decoder(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Decoder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Decoder() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pocketsphinxPINVOKE.delete_Decoder(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Decoder() : this(pocketsphinxPINVOKE.new_Decoder__SWIG_0(), true) {
  }

  public Decoder(Config config) : this(pocketsphinxPINVOKE.new_Decoder__SWIG_1(Config.getCPtr(config)), true) {
  }

  public void Reinit(Config config) {
    pocketsphinxPINVOKE.Decoder_Reinit(swigCPtr, Config.getCPtr(config));
  }

  public void LoadDict(string fdict, string ffilter, string format) {
    pocketsphinxPINVOKE.Decoder_LoadDict(swigCPtr, fdict, ffilter, format);
  }

  public void SaveDict(string dictfile, string format) {
    pocketsphinxPINVOKE.Decoder_SaveDict(swigCPtr, dictfile, format);
  }

  public void AddWord(string word, string phones, int update) {
    pocketsphinxPINVOKE.Decoder_AddWord(swigCPtr, word, phones, update);
  }

  public string LookupWord(string word) {
    string ret = pocketsphinxPINVOKE.Decoder_LookupWord(swigCPtr, word);
    return ret;
  }

  public Lattice GetLattice() {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_GetLattice(swigCPtr);
    Lattice ret = (cPtr == global::System.IntPtr.Zero) ? null : new Lattice(cPtr, false);
    return ret;
  }

  public Config GetConfig() {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_GetConfig(swigCPtr);
    Config ret = (cPtr == global::System.IntPtr.Zero) ? null : new Config(cPtr, true);
    return ret;
  }

  public static Config DefaultConfig() {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_DefaultConfig();
    Config ret = (cPtr == global::System.IntPtr.Zero) ? null : new Config(cPtr, true);
    return ret;
  }

  public static Config FileConfig(string path) {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_FileConfig(path);
    Config ret = (cPtr == global::System.IntPtr.Zero) ? null : new Config(cPtr, true);
    return ret;
  }

  public void StartStream() {
    pocketsphinxPINVOKE.Decoder_StartStream(swigCPtr);
  }

  public void StartUtt() {
    pocketsphinxPINVOKE.Decoder_StartUtt(swigCPtr);
  }

  public void EndUtt() {
    pocketsphinxPINVOKE.Decoder_EndUtt(swigCPtr);
  }

  public int ProcessRaw(byte[] SDATA, int SIZE, bool no_search, bool full_utt) {
    int ret = pocketsphinxPINVOKE.Decoder_ProcessRaw(swigCPtr, SDATA, SIZE, no_search, full_utt);
    return ret;
  }

  public Hypothesis Hyp() {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_Hyp(swigCPtr);
    Hypothesis ret = (cPtr == global::System.IntPtr.Zero) ? null : new Hypothesis(cPtr, true);
    return ret;
  }

  public FrontEnd GetFe() {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_GetFe(swigCPtr);
    FrontEnd ret = (cPtr == global::System.IntPtr.Zero) ? null : new FrontEnd(cPtr, false);
    return ret;
  }

  public Feature GetFeat() {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_GetFeat(swigCPtr);
    Feature ret = (cPtr == global::System.IntPtr.Zero) ? null : new Feature(cPtr, false);
    return ret;
  }

  public bool GetInSpeech() {
    bool ret = pocketsphinxPINVOKE.Decoder_GetInSpeech(swigCPtr);
    return ret;
  }

  public FsgModel GetFsg(string name) {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_GetFsg(swigCPtr, name);
    FsgModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new FsgModel(cPtr, false);
    return ret;
  }

  public void SetFsg(string name, FsgModel fsg) {
    pocketsphinxPINVOKE.Decoder_SetFsg(swigCPtr, name, FsgModel.getCPtr(fsg));
  }

  public void SetJsgfFile(string name, string path) {
    pocketsphinxPINVOKE.Decoder_SetJsgfFile(swigCPtr, name, path);
  }

  public void SetJsgfString(string name, string jsgf_string) {
    pocketsphinxPINVOKE.Decoder_SetJsgfString(swigCPtr, name, jsgf_string);
  }

  public string GetKws(string name) {
    string ret = pocketsphinxPINVOKE.Decoder_GetKws(swigCPtr, name);
    return ret;
  }

  public void SetKws(string name, string keyfile) {
    pocketsphinxPINVOKE.Decoder_SetKws(swigCPtr, name, keyfile);
  }

  public void SetKeyphrase(string name, string keyphrase) {
    pocketsphinxPINVOKE.Decoder_SetKeyphrase(swigCPtr, name, keyphrase);
  }

  public void SetAllphoneFile(string name, string lmfile) {
    pocketsphinxPINVOKE.Decoder_SetAllphoneFile(swigCPtr, name, lmfile);
  }

  public NGramModel GetLm(string name) {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_GetLm(swigCPtr, name);
    NGramModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new NGramModel(cPtr, true);
    return ret;
  }

  public void SetLm(string name, NGramModel lm) {
    pocketsphinxPINVOKE.Decoder_SetLm(swigCPtr, name, NGramModel.getCPtr(lm));
  }

  public void SetLmFile(string name, string path) {
    pocketsphinxPINVOKE.Decoder_SetLmFile(swigCPtr, name, path);
  }

  public LogMath GetLogmath() {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_GetLogmath(swigCPtr);
    LogMath ret = (cPtr == global::System.IntPtr.Zero) ? null : new LogMath(cPtr, true);
    return ret;
  }

  public void SetSearch(string search_name) {
    pocketsphinxPINVOKE.Decoder_SetSearch(swigCPtr, search_name);
  }

  public void UnsetSearch(string search_name) {
    pocketsphinxPINVOKE.Decoder_UnsetSearch(swigCPtr, search_name);
  }

  public string GetSearch() {
    string ret = pocketsphinxPINVOKE.Decoder_GetSearch(swigCPtr);
    return ret;
  }

  public int NFrames() {
    int ret = pocketsphinxPINVOKE.Decoder_NFrames(swigCPtr);
    return ret;
  }

  public SegmentList Seg() {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_Seg(swigCPtr);
    SegmentList ret = (cPtr == global::System.IntPtr.Zero) ? null : new SegmentList(cPtr, false);
    return ret;
  }

  public NBestList Nbest() {
    global::System.IntPtr cPtr = pocketsphinxPINVOKE.Decoder_Nbest(swigCPtr);
    NBestList ret = (cPtr == global::System.IntPtr.Zero) ? null : new NBestList(cPtr, false);
    return ret;
  }

}

}
